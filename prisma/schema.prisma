generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  STAFF
  ORGANIZER
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  role          UserRole  @default(USER)
  permissions   String[]  @default([])
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  lastLogin     DateTime? @map("last_login")
  accounts      Account[]
  events        Event[]
  sessions      Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Event {
  id             String           @id @default(cuid())
  name           String
  description    String?
  location       String
  slug           String           @unique
  banner         String?
  startDate      DateTime         @map("start_date")
  endDate        DateTime         @map("end_date")
  startTime      String?          @map("start_time")
  endTime        String?          @map("end_time")
  sector         String?
  type           String?
  format         String?
  timezone       String?
  videoUrl       String?          @map("video_url")
  supportEmail   String?          @map("support_email")
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  userId         String           @map("user_id")
  logo           String?          @map("logo")
  event_sessions event_sessions[]
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  registrations  Registration[]
  sponsors       Sponsor[]

  @@map("events")
}

model Registration {
  id          String    @id @default(cuid())
  firstName   String    @map("first_name")
  lastName    String    @map("last_name")
  email       String
  phone       String
  type        String    @default("PARTICIPANT")
  jobTitle    String?   @map("job_title")
  company     String?   @map("company")
  eventId     String    @map("event_id")
  qrCode      String    @unique @map("qr_code")
  shortCode   String?   @unique @map("short_code")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  checkedIn   Boolean   @default(false) @map("checked_in")
  checkInTime DateTime? @map("check_in_time")
  event       Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  sessions    SessionParticipant[]

  @@map("registrations")
}

model event_sessions {
  id          String   @id
  title       String
  description String?
  start_date  DateTime
  end_date    DateTime
  start_time  String
  end_time    String
  location    String?
  speaker     String?
  capacity    Int?
  format      String?
  banner      String?
  video_url   String?
  event_id    String
  created_at  DateTime @default(now())
  updated_at  DateTime
  events      Event    @relation(fields: [event_id], references: [id], onDelete: Cascade)
  participants SessionParticipant[]
}

model Sponsor {
  id          String       @id @default(cuid())
  name        String
  description String?
  logo        String?
  website     String?
  level       SponsorLevel @default(GOLD)
  visible     Boolean      @default(true)
  eventId     String       @map("event_id")
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  event       Event        @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("sponsors")
}

enum SponsorLevel {
  PLATINUM
  GOLD
  SILVER
  BRONZE
  PARTNER
  MEDIA
  OTHER
}

// Table de jointure pour les participants aux sessions
model SessionParticipant {
  id              String         @id @default(cuid())
  sessionId       String         @map("session_id")
  participantId   String         @map("participant_id")
  registeredAt    DateTime       @default(now()) @map("registered_at")
  attendedSession Boolean        @default(false) @map("attended_session")
  attendanceTime  DateTime?      @map("attendance_time")
  session         event_sessions @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  participant     Registration   @relation(fields: [participantId], references: [id], onDelete: Cascade)

  @@unique([sessionId, participantId])
  @@map("session_participants")
}
