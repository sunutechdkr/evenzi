generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String             @id @default(cuid())
  name          String?
  email         String?            @unique
  emailVerified DateTime?          @map("email_verified")
  image         String?
  password      String?
  createdAt     DateTime           @default(now()) @map("created_at")
  updatedAt     DateTime           @updatedAt @map("updated_at")
  permissions   String[]           @default([])
  role          UserRole           @default(USER)
  lastLogin     DateTime?          @map("last_login")
  phone         String?
  plan          UserPlan           @default(STARTER)
  accounts      Account[]
  events        Event[]
  suggestedFor  MatchSuggestion[]  @relation("SuggestedUsers")
  suggestions   MatchSuggestion[]  @relation("UserSuggestions")
  notifications Notification[]
  sessions      Session[]
  matchProfiles UserMatchProfile[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Event {
  id                String             @id @default(cuid())
  name              String
  description       String?
  location          String
  slug              String             @unique
  banner            String?
  startDate         DateTime           @map("start_date")
  endDate           DateTime           @map("end_date")
  startTime         String?            @map("start_time")
  endTime           String?            @map("end_time")
  sector            String?
  type              String?
  format            String?
  timezone          String?
  videoUrl          String?            @map("video_url")
  supportEmail      String?            @map("support_email")
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  userId            String             @map("user_id")
  logo              String?            @map("logo")
  archived          Boolean            @default(false) @map("archived")
  archivedAt        DateTime?          @map("archived_at")
  appointments      Appointment[]
  badgeTemplates    BadgeTemplate[]
  badges            Badge[]
  emailCampaigns    EmailCampaign[]
  emailTemplates    EmailTemplate[]
  event_sessions    event_sessions[]
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  games             Game[]
  matchSuggestions  MatchSuggestion[]
  notifications     Notification[]
  participantBadges ParticipantBadge[]
  registrations     Registration[]
  sponsors          Sponsor[]
  tickets           Ticket[]
  userEventScores   UserEventScore[]
  matchProfiles     UserMatchProfile[]

  @@map("events")
}

model Registration {
  id                   String               @id @default(cuid())
  firstName            String               @map("first_name")
  lastName             String               @map("last_name")
  email                String
  phone                String
  type                 String               @default("PARTICIPANT")
  eventId              String               @map("event_id")
  qrCode               String               @unique @map("qr_code")
  createdAt            DateTime             @default(now()) @map("created_at")
  updatedAt            DateTime             @updatedAt @map("updated_at")
  checkedIn            Boolean              @default(false) @map("checked_in")
  checkInTime          DateTime?            @map("check_in_time")
  shortCode            String?              @unique @map("short_code")
  company              String?              @map("company")
  jobTitle             String?              @map("job_title")
  ticketId             String?              @map("ticket_id")
  receivedAppointments Appointment[]        @relation("RecipientRelation")
  sentAppointments     Appointment[]        @relation("RequesterRelation")
  games                Game[]
  participantBadges    ParticipantBadge[]
  event                Event                @relation(fields: [eventId], references: [id], onDelete: Cascade)
  ticket               Ticket?              @relation(fields: [ticketId], references: [id])
  sessions             SessionParticipant[]
  userEventScores      UserEventScore[]

  @@map("registrations")
}

model Ticket {
  id            String           @id @default(cuid())
  name          String
  description   String?
  price         Decimal          @default(0)
  quantity      Int?
  sold          Int              @default(0)
  status        TicketStatus     @default(ACTIVE)
  visibility    TicketVisibility @default(VISIBLE)
  validFrom     DateTime         @map("valid_from")
  validUntil    DateTime         @map("valid_until")
  group         String           @default("Attendees")
  eventId       String           @map("event_id")
  createdAt     DateTime         @default(now()) @map("created_at")
  updatedAt     DateTime         @updatedAt @map("updated_at")
  currency      String           @default("XOF")
  registrations Registration[]
  event         Event            @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("tickets")
}

model event_sessions {
  id           String               @id
  title        String
  description  String?
  start_date   DateTime
  end_date     DateTime
  start_time   String
  end_time     String
  location     String?
  speaker      String?
  capacity     Int?
  event_id     String
  created_at   DateTime             @default(now())
  updated_at   DateTime
  banner       String?
  format       String?
  video_url    String?
  events       Event                @relation(fields: [event_id], references: [id], onDelete: Cascade)
  participants SessionParticipant[]
}

model Sponsor {
  id          String       @id @default(cuid())
  name        String
  description String?
  logo        String?
  website     String?
  level       SponsorLevel @default(GOLD)
  visible     Boolean      @default(true)
  eventId     String       @map("event_id")
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  address     String?
  documents   Json?
  email       String?
  facebookUrl String?      @map("facebook_url")
  linkedinUrl String?      @map("linkedin_url")
  location    String?
  mobile      String?
  phone       String?
  twitterUrl  String?      @map("twitter_url")
  event       Event        @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("sponsors")
}

model SessionParticipant {
  id              String         @id @default(cuid())
  sessionId       String         @map("session_id")
  participantId   String         @map("participant_id")
  registeredAt    DateTime       @default(now()) @map("registered_at")
  attendedSession Boolean        @default(false) @map("attended_session")
  attendanceTime  DateTime?      @map("attendance_time")
  participant     Registration   @relation(fields: [participantId], references: [id], onDelete: Cascade)
  session         event_sessions @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@unique([sessionId, participantId])
  @@map("session_participants")
}

model Appointment {
  id            String            @id @default(cuid())
  eventId       String            @map("event_id")
  requesterId   String            @map("requester_id")
  recipientId   String            @map("recipient_id")
  status        AppointmentStatus @default(PENDING)
  message       String?
  proposedTime  DateTime?         @map("proposed_time")
  confirmedTime DateTime?         @map("confirmed_time")
  location      String?
  notes         String?
  createdAt     DateTime          @default(now()) @map("created_at")
  updatedAt     DateTime          @updatedAt @map("updated_at")
  event         Event             @relation(fields: [eventId], references: [id], onDelete: Cascade)
  recipient     Registration      @relation("RecipientRelation", fields: [recipientId], references: [id], onDelete: Cascade)
  requester     Registration      @relation("RequesterRelation", fields: [requesterId], references: [id], onDelete: Cascade)

  @@map("appointments")
}

model OtpCode {
  id        String   @id @default(cuid())
  email     String
  code      String
  eventId   String?
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@map("otp_codes")
}

model Badge {
  id         String   @id @default(cuid())
  eventId    String   @map("event_id")
  name       String?
  canvasData String?  @map("canvas_data")
  isDefault  Boolean  @default(false) @map("is_default")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  event      Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("badges")
}

model BadgeTemplate {
  id                String             @id @default(cuid())
  name              String
  description       String?
  canvasData        String             @map("canvas_data")
  isGlobal          Boolean            @default(false) @map("is_global")
  eventId           String?            @map("event_id")
  isActive          Boolean            @default(true) @map("is_active")
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  event             Event?             @relation(fields: [eventId], references: [id], onDelete: Cascade)
  participantBadges ParticipantBadge[]

  @@map("badge_templates")
}

model ParticipantBadge {
  id             String        @id @default(cuid())
  registrationId String        @map("registration_id")
  eventId        String        @map("event_id")
  templateId     String        @map("template_id")
  status         BadgeStatus   @default(GENERATED)
  generatedAt    DateTime      @default(now()) @map("generated_at")
  printedAt      DateTime?     @map("printed_at")
  deliveredAt    DateTime?     @map("delivered_at")
  customData     String?       @map("custom_data")
  qrCodeData     String?       @map("qr_code_data")
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @updatedAt @map("updated_at")
  event          Event         @relation(fields: [eventId], references: [id], onDelete: Cascade)
  registration   Registration  @relation(fields: [registrationId], references: [id], onDelete: Cascade)
  template       BadgeTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@unique([registrationId, eventId])
  @@map("participant_badges")
}

model EmailCampaign {
  id              String         @id @default(cuid())
  eventId         String         @map("event_id")
  name            String
  description     String?
  type            CampaignType   @default(CUSTOM)
  recipientType   RecipientType  @default(ALL_PARTICIPANTS) @map("recipient_type")
  subject         String
  htmlContent     String         @map("html_content")
  textContent     String?        @map("text_content")
  status          CampaignStatus @default(DRAFT)
  scheduledAt     DateTime?      @map("scheduled_at")
  sentAt          DateTime?      @map("sent_at")
  totalRecipients Int?           @map("total_recipients")
  successCount    Int?           @map("success_count")
  failureCount    Int?           @map("failure_count")
  createdAt       DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime       @updatedAt @map("updated_at")
  event           Event          @relation(fields: [eventId], references: [id], onDelete: Cascade)
  emailLogs       EmailLog[]

  @@map("email_campaigns")
}

model EmailTemplate {
  id          String            @id @default(cuid())
  name        String
  description String?
  subject     String
  htmlContent String            @map("html_content")
  textContent String?           @map("text_content")
  type        CampaignType      @default(CUSTOM)
  category    TemplateCategory?
  isGlobal    Boolean           @default(false) @map("is_global")
  eventId     String?           @map("event_id")
  isActive    Boolean           @default(true) @map("is_active")
  isDefault   Boolean           @default(false) @map("is_default")
  createdAt   DateTime          @default(now()) @map("created_at")
  updatedAt   DateTime          @updatedAt @map("updated_at")
  event       Event?            @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("email_templates")
}

model EmailLog {
  id             String        @id @default(cuid())
  campaignId     String        @map("campaign_id")
  recipientEmail String        @map("recipient_email")
  recipientName  String?       @map("recipient_name")
  status         EmailStatus   @default(PENDING)
  errorMessage   String?       @map("error_message")
  sentAt         DateTime?     @map("sent_at")
  deliveredAt    DateTime?     @map("delivered_at")
  openedAt       DateTime?     @map("opened_at")
  clickedAt      DateTime?     @map("clicked_at")
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @updatedAt @map("updated_at")
  campaign       EmailCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@map("email_logs")
}

model Game {
  id              String       @id @default(cuid())
  eventId         String       @map("event_id")
  participantId   String       @map("participant_id")
  action          GameAction
  points          Int
  actionDetails   String?      @map("action_details")
  relatedEntityId String?      @map("related_entity_id")
  createdAt       DateTime     @default(now()) @map("created_at")
  event           Event        @relation(fields: [eventId], references: [id], onDelete: Cascade)
  participant     Registration @relation(fields: [participantId], references: [id], onDelete: Cascade)

  @@map("games")
}

model UserEventScore {
  id            String       @id @default(cuid())
  eventId       String       @map("event_id")
  participantId String       @map("participant_id")
  totalPoints   Int          @default(0) @map("total_points")
  lastUpdated   DateTime     @default(now()) @map("last_updated")
  createdAt     DateTime     @default(now()) @map("created_at")
  event         Event        @relation(fields: [eventId], references: [id], onDelete: Cascade)
  participant   Registration @relation(fields: [participantId], references: [id], onDelete: Cascade)

  @@unique([eventId, participantId])
  @@map("user_event_scores")
}

model UserMatchProfile {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  eventId      String   @map("event_id")
  headline     String?
  bio          String?
  interests    String[] @default([])
  goals        String[] @default([])
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  availability String[] @default([])
  company      String?
  jobTitle     String?  @map("job_title")
  event        Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
  @@map("user_match_profiles")
}

model MatchSuggestion {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  suggestedId String   @map("suggested_id")
  eventId     String   @map("event_id")
  score       Float
  reason      String?
  createdAt   DateTime @default(now()) @map("created_at")
  event       Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  suggested   User     @relation("SuggestedUsers", fields: [suggestedId], references: [id], onDelete: Cascade)
  user        User     @relation("UserSuggestions", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, suggestedId, eventId])
  @@map("match_suggestions")
}

model Notification {
  id         String               @id @default(dbgenerated("(gen_random_uuid())::text")) @db.VarChar(255)
  userId     String               @map("user_id") @db.VarChar(255)
  title      String               @db.VarChar(255)
  message    String
  type       notificationtype
  priority   notificationpriority @default(NORMAL)
  isRead     Boolean              @default(false) @map("is_read")
  readAt     DateTime?            @map("read_at") @db.Timestamp(6)
  createdAt  DateTime             @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt  DateTime             @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  eventId    String?              @map("event_id") @db.VarChar(255)
  entityId   String?              @map("entity_id") @db.VarChar(255)
  entityType String?              @map("entity_type") @db.VarChar(255)
  actionUrl  String?              @map("action_url") @db.VarChar(255)
  metadata   Json?
  event      Event?               @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_notifications_event")
  user       User                 @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_notifications_user")

  @@index([createdAt(sort: Desc)], map: "idx_notifications_created_at")
  @@index([eventId], map: "idx_notifications_event_id")
  @@index([priority], map: "idx_notifications_priority")
  @@index([type], map: "idx_notifications_type")
  @@index([userId, createdAt(sort: Desc)], map: "idx_notifications_user_id_created_at")
  @@index([userId, isRead], map: "idx_notifications_user_id_is_read")
  @@map("notifications")
}

model notification_templates {
  id         String   @id
  name       String
  type       String
  title      String
  message    String
  priority   String   @default("MEDIUM")
  channels   String[] @default(["IN_APP"])
  active     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime
}

enum UserRole {
  USER
  STAFF
  ORGANIZER
  ADMIN
}

enum UserPlan {
  STARTER
  PRO
  PREMIUM
}

enum TicketStatus {
  ACTIVE
  TERMINATED
  DRAFT
}

enum TicketVisibility {
  VISIBLE
  HIDDEN
}

enum SponsorLevel {
  PLATINUM
  GOLD
  SILVER
  BRONZE
  PARTNER
  MEDIA
  OTHER
}

enum AppointmentStatus {
  PENDING
  ACCEPTED
  DECLINED
  COMPLETED
}

enum BadgeStatus {
  GENERATED
  PRINTED
  DELIVERED
}

enum CampaignStatus {
  DRAFT
  SCHEDULED
  SENDING
  SENT
  FAILED
}

enum CampaignType {
  ANNOUNCEMENT
  REMINDER
  INVITATION
  FOLLOW_UP
  CUSTOM
}

enum RecipientType {
  ALL_PARTICIPANTS
  PARTICIPANTS
  SPEAKERS
  EXHIBITORS
  SPONSORS
  CUSTOM_LIST
}

enum TemplateCategory {
  CONFIRMATION_INSCRIPTION
  BIENVENUE_PARTICIPANT
  RAPPEL_EVENEMENT
  INFOS_PRATIQUES
  SUIVI_POST_EVENEMENT
  GUIDE_EXPOSANT
  RAPPEL_INSTALLATION
  INFOS_TECHNIQUES_STAND
  BILAN_PARTICIPATION
  CONFIRMATION_SPEAKER
  INFOS_TECHNIQUES_PRESENTATION
  RAPPEL_PRESENTATION
  REMERCIEMENT_SPEAKER
  CONFIRMATION_CHECKIN
}

enum EmailStatus {
  PENDING
  SENT
  DELIVERED
  FAILED
  BOUNCED
  OPENED
  CLICKED
}

enum GameAction {
  CHECK_IN
  SESSION_ENTRY
  SESSION_PARTICIPATION
  PARTICIPANT_SCAN
  APPOINTMENT_REQUEST
  APPOINTMENT_CONFIRMED
}

enum notificationpriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum notificationtype {
  SYSTEM
  EVENT
  REGISTRATION
  APPOINTMENT
  GAME
  EMAIL
  MATCHMAKING
  SESSION
  BADGE
}
