import { NextResponse } from "next/server";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth";
import prisma from "@/lib/prisma";

const SAMPLE_INTERESTS = [
  ["IA", "Machine Learning", "Innovation", "Startup"],
  ["Blockchain", "Fintech", "Crypto", "Innovation"],
  ["Marketing", "Digital", "E-commerce", "Growth"],
  ["Design", "UX/UI", "Product", "Cr√©ativit√©"],
  ["Finance", "Investissement", "Business", "Strat√©gie"],
  ["Tech", "DevOps", "Cloud", "D√©veloppement"],
  ["RH", "Management", "Leadership", "Talent"],
  ["Sales", "Business Development", "Partnerships", "Networking"]
];

const SAMPLE_GOALS = [
  ["Networking", "Apprentissage", "Innovation"],
  ["Investissement", "Partenariat", "Expansion"],
  ["Recrutement", "Talent", "Team Building"],
  ["Vente", "Business Development", "Growth"],
  ["Collaboration", "Partenariat", "Innovation"],
  ["Mentoring", "Formation", "Apprentissage"],
  ["Fundraising", "Investissement", "Croissance"],
  ["Consulting", "Expertise", "Conseil"]
];

const SAMPLE_AVAILABILITY = [
  ["09:00 - 10:00", "10:00 - 11:00", "14:00 - 15:00"],
  ["11:00 - 12:00", "15:00 - 16:00", "16:00 - 17:00"],
  ["09:00 - 10:00", "13:00 - 14:00", "17:00 - 18:00"],
  ["10:00 - 11:00", "11:00 - 12:00", "15:00 - 16:00"],
  ["14:00 - 15:00", "15:00 - 16:00", "16:00 - 17:00"],
  ["09:00 - 10:00", "12:00 - 13:00", "13:00 - 14:00"],
  ["11:00 - 12:00", "14:00 - 15:00", "17:00 - 18:00"],
  ["10:00 - 11:00", "16:00 - 17:00", "17:00 - 18:00"]
];

const SAMPLE_HEADLINES = [
  "Expert en IA et Machine Learning",
  "Entrepreneur Blockchain & Fintech",
  "Directeur Marketing Digital",
  "Designer UX/UI Senior",
  "Analyste Financier & Investisseur",
  "D√©veloppeur Full-Stack & DevOps",
  "Responsable RH & Talent Acquisition",
  "Business Developer & Sales Manager"
];

const SAMPLE_BIOS = [
  "Passionn√© par l'intelligence artificielle et son application dans les entreprises. J'aide les startups √† int√©grer l'IA dans leurs processus.",
  "Entrepreneur dans le domaine blockchain depuis 5 ans. Je d√©veloppe des solutions DeFi innovantes et accompagne les projets crypto.",
  "Sp√©cialiste du marketing digital avec 8 ans d'exp√©rience. J'aide les entreprises √† d√©velopper leur pr√©sence en ligne et optimiser leurs conversions.",
  "Designer passionn√© par l'exp√©rience utilisateur. Je cr√©e des interfaces intuitives qui transforment la fa√ßon dont les gens interagissent avec la technologie.",
  "Analyste financier avec expertise en investissement et √©valuation d'entreprises. Je conseille les startups sur leur strat√©gie de financement.",
  "D√©veloppeur full-stack passionn√© par les technologies modernes. J'aide les entreprises √† construire des applications scalables et performantes.",
  "Responsable RH sp√©cialis√© dans le recrutement tech. J'aide les startups √† construire leurs √©quipes et d√©velopper leur culture d'entreprise.",
  "Business developer avec un r√©seau √©tendu dans l'√©cosyst√®me startup. Je facilite les partenariats et le d√©veloppement commercial."
];

export async function POST() {
  try {
    const session = await getServerSession(authOptions);
    
    // V√©rifier que l'utilisateur est admin
    if (!session?.user?.role || session.user.role !== 'ADMIN') {
      return NextResponse.json({ message: "Acc√®s refus√©" }, { status: 403 });
    }

    console.log('üå± D√©but du seeding des donn√©es de matchmaking...');

    // R√©cup√©rer toutes les registrations avec les informations √©v√©nement
    const registrations = await prisma.registration.findMany({
      include: {
        event: true
      }
    });

    console.log(`üë• Trouv√© ${registrations.length} registrations`);

    let createdProfiles = 0;
    let skippedProfiles = 0;

    for (const registration of registrations) {
      // Trouver l'utilisateur par email
      const user = await prisma.user.findUnique({
        where: {
          email: registration.email
        }
      });

      if (!user) {
        console.log(`‚ö†Ô∏è  Utilisateur non trouv√© pour l'email ${registration.email}`);
        continue;
      }

      // V√©rifier si un profil de matchmaking existe d√©j√†
      const existingProfile = await prisma.userMatchProfile.findUnique({
        where: {
          userId_eventId: {
            userId: user.id,
            eventId: registration.eventId
          }
        }
      });

      if (!existingProfile) {
        // Cr√©er un profil de matchmaking avec des donn√©es al√©atoires
        const randomIndex = Math.floor(Math.random() * SAMPLE_INTERESTS.length);
        
        await prisma.userMatchProfile.create({
          data: {
            userId: user.id,
            eventId: registration.eventId,
            headline: SAMPLE_HEADLINES[randomIndex],
            bio: SAMPLE_BIOS[randomIndex],
            jobTitle: registration.jobTitle || `Professionnel ${randomIndex + 1}`,
            company: registration.company || `Entreprise ${randomIndex + 1}`,
            interests: SAMPLE_INTERESTS[randomIndex],
            goals: SAMPLE_GOALS[randomIndex],
            availability: SAMPLE_AVAILABILITY[randomIndex]
          }
        });

        createdProfiles++;
        console.log(`‚úÖ Profil cr√©√© pour ${user.name || user.email} dans l'√©v√©nement ${registration.event.name}`);
      } else {
        skippedProfiles++;
        console.log(`‚è≠Ô∏è  Profil existant pour ${user.name || user.email} dans l'√©v√©nement ${registration.event.name}`);
      }
    }

    const result = {
      message: "Seeding termin√© avec succ√®s",
      createdProfiles,
      skippedProfiles,
      totalRegistrations: registrations.length
    };

    console.log(`üéâ ${result.message} ! ${createdProfiles} nouveaux profils cr√©√©s, ${skippedProfiles} profils existants.`);

    return NextResponse.json(result);

  } catch (error) {
    console.error('‚ùå Erreur lors du seeding:', error);
    return NextResponse.json({ message: "Erreur serveur lors du seeding" }, { status: 500 });
  }
} 