/**
 * Script de test pour le syst√®me de notifications
 * Teste toutes les fonctionnalit√©s de notifications
 */

import { prisma } from '@/lib/prisma';
import { 
  createNotification,
  createRegistrationNotification,
  createGameNotification,
  createEmailCampaignNotification,
  createSystemNotification,
  getUserNotifications,
  getUnreadNotificationsCount,
  markNotificationAsRead,
  markAllNotificationsAsRead
} from '@/lib/notifications';

async function testNotificationSystem() {
  console.log('üß™ D√©but des tests du syst√®me de notifications...\n');

  try {
    // 1. Trouver un utilisateur de test
    const testUser = await prisma.user.findFirst({
      where: {
        email: 'bouba@evenzi.io'
      }
    });

    if (!testUser) {
      console.error('‚ùå Utilisateur de test non trouv√©');
      return;
    }

    console.log(`‚úÖ Utilisateur de test trouv√©: ${testUser.email} (${testUser.id})`);

    // 2. Trouver un √©v√©nement de test
    const testEvent = await prisma.event.findFirst({
      where: {
        userId: testUser.id
      }
    });

    if (!testEvent) {
      console.log('‚ö†Ô∏è Aucun √©v√©nement trouv√©, cr√©ation d\'un √©v√©nement de test...');
      // Cr√©er un √©v√©nement de test si n√©cessaire
      const newEvent = await prisma.event.create({
        data: {
          name: 'Test Event - Notifications',
          description: '√âv√©nement de test pour les notifications',
          location: 'Test Location',
          slug: 'test-event-notifications-' + Date.now(),
          startDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // Dans 7 jours
          endDate: new Date(Date.now() + 8 * 24 * 60 * 60 * 1000), // Dans 8 jours
          userId: testUser.id,
        }
      });
      console.log(`‚úÖ √âv√©nement de test cr√©√©: ${newEvent.name} (${newEvent.id})`);
    }

    const eventId = testEvent?.id || (await prisma.event.findFirst({ where: { userId: testUser.id } }))?.id;

    if (!eventId) {
      console.error('‚ùå Impossible de cr√©er ou trouver un √©v√©nement de test');
      return;
    }

    // 3. Test de cr√©ation de notifications
    console.log('\nüìù Test de cr√©ation de notifications...');

    // Notification syst√®me
    const systemNotif = await createSystemNotification(
      testUser.id,
      'Test Notification Syst√®me',
      'Ceci est une notification de test du syst√®me',
      'HIGH'
    );
    console.log(`‚úÖ Notification syst√®me cr√©√©e: ${systemNotif.id}`);

    // Notification d'inscription
    const registrationNotif = await createRegistrationNotification(
      testUser.id,
      eventId,
      'Jean Test',
      'test-registration-id'
    );
    console.log(`‚úÖ Notification d'inscription cr√©√©e: ${registrationNotif.id}`);

    // Notification de gamification
    const gameNotif = await createGameNotification(
      testUser.id,
      eventId,
      50,
      'CHECK_IN',
      'test-game-id'
    );
    console.log(`‚úÖ Notification de gamification cr√©√©e: ${gameNotif.id}`);

    // Notification de campagne email
    const emailNotif = await createEmailCampaignNotification(
      testUser.id,
      eventId,
      'Campagne de Test',
      25,
      'test-campaign-id'
    );
    console.log(`‚úÖ Notification de campagne email cr√©√©e: ${emailNotif.id}`);

    // 4. Test de r√©cup√©ration des notifications
    console.log('\nüìã Test de r√©cup√©ration des notifications...');

    const allNotifications = await getUserNotifications({
      userId: testUser.id,
      limit: 10
    });
    console.log(`‚úÖ ${allNotifications.length} notifications r√©cup√©r√©es`);

    const unreadNotifications = await getUserNotifications({
      userId: testUser.id,
      isRead: false,
      limit: 10
    });
    console.log(`‚úÖ ${unreadNotifications.length} notifications non lues`);

    // 5. Test du compteur de notifications non lues
    const unreadCount = await getUnreadNotificationsCount(testUser.id);
    console.log(`‚úÖ Compteur de notifications non lues: ${unreadCount}`);

    // 6. Test de marquage comme lu
    console.log('\n‚úÖ Test de marquage comme lu...');

    if (allNotifications.length > 0) {
      const firstNotif = allNotifications[0];
      await markNotificationAsRead(firstNotif.id, testUser.id);
      console.log(`‚úÖ Notification ${firstNotif.id} marqu√©e comme lue`);
    }

    // 7. Test de marquage de toutes les notifications comme lues
    console.log('\n‚úÖ Test de marquage de toutes les notifications comme lues...');
    
    const markAllResult = await markAllNotificationsAsRead(testUser.id);
    console.log(`‚úÖ ${markAllResult.count} notifications marqu√©es comme lues`);

    // 8. V√©rification finale
    const finalUnreadCount = await getUnreadNotificationsCount(testUser.id);
    console.log(`‚úÖ Compteur final de notifications non lues: ${finalUnreadCount}`);

    console.log('\nüéâ Tous les tests sont pass√©s avec succ√®s !');

    // 9. Affichage des notifications cr√©√©es
    console.log('\nüìä R√©sum√© des notifications cr√©√©es:');
    const finalNotifications = await getUserNotifications({
      userId: testUser.id,
      limit: 10
    });

    finalNotifications.forEach((notif, index) => {
      console.log(`${index + 1}. [${notif.type}] ${notif.title} - ${notif.isRead ? 'Lu' : 'Non lu'}`);
    });

  } catch (error) {
    console.error('‚ùå Erreur lors des tests:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Ex√©cuter les tests si le script est appel√© directement
if (require.main === module) {
  testNotificationSystem();
}

export { testNotificationSystem };
