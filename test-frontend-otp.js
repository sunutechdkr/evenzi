const { PrismaClient } = require('./src/generated/prisma');

// Charger les variables d'environnement
require('dotenv').config({ path: '.env.local' });

const prisma = new PrismaClient();

async function testFrontendOTPFlow() {
  try {
    console.log('=== TEST COMPLET DU FLUX OTP FRONTEND ===\n');
    
    const email = 'bouba@ineventapp.com';
    
    // √âtape 1: Envoyer un OTP
    console.log('1. üìß Envoi du code OTP...');
    const sendResponse = await fetch('http://localhost:3002/api/auth/participant-magic-link', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ email }),
    });

    const sendResult = await sendResponse.json();
    console.log(`   Status: ${sendResponse.status}`);
    console.log(`   R√©sultat: ${sendResult.success ? '‚úÖ Envoy√©' : '‚ùå Erreur'}`);
    
    if (!sendResult.success) {
      console.log(`   Erreur: ${sendResult.error}`);
      return;
    }
    
    console.log(`   √âv√©nement: ${sendResult.eventName}\n`);

    // R√©cup√©rer le dernier code OTP
    console.log('2. üîç R√©cup√©ration du code OTP...');
    const latestOTP = await prisma.otpCode.findFirst({
      where: {
        email: email.toLowerCase(),
        used: false,
        expiresAt: {
          gt: new Date()
        }
      },
      orderBy: {
        createdAt: 'desc'
      }
    });

    if (!latestOTP) {
      console.log('‚ùå Aucun code OTP valide trouv√©');
      return;
    }

    console.log(`   ‚úÖ Code trouv√©: ${latestOTP.code}\n`);

    // √âtape 2: V√©rifier le code OTP
    console.log('3. ‚úÖ V√©rification du code OTP...');
    const verifyResponse = await fetch('http://localhost:3002/api/auth/participant-verify-otp', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        email: email,
        code: latestOTP.code
      }),
    });

    const verifyResult = await verifyResponse.json();
    console.log(`   Status: ${verifyResponse.status}`);
    console.log(`   R√©sultat: ${verifyResult.success ? '‚úÖ V√©rifi√©' : '‚ùå Erreur'}`);
    
    if (!verifyResult.success) {
      console.log(`   Erreur: ${verifyResult.error}`);
      return;
    }

    console.log(`   Token JWT: ${verifyResult.token ? '‚úÖ G√©n√©r√©' : '‚ùå Manquant'}`);
    console.log(`   Utilisateur: ${verifyResult.user.firstName} ${verifyResult.user.lastName}`);
    console.log(`   Redirection: ${verifyResult.redirectUrl}\n`);

    // √âtape 3: Tester la redirection
    console.log('4. üîÑ Test de la redirection...');
    const redirectResponse = await fetch(`http://localhost:3002${verifyResult.redirectUrl}`, {
      headers: {
        'Cookie': `next-auth.session-token=${verifyResult.token}`,
      },
    });

    console.log(`   Status: ${redirectResponse.status}`);
    
    if (redirectResponse.status === 200) {
      console.log('   ‚úÖ Redirection r√©ussie vers /dashboard/user');
    } else {
      console.log(`   ‚ö†Ô∏è  Redirection avec statut: ${redirectResponse.status}`);
      console.log(`   Headers: ${JSON.stringify([...redirectResponse.headers.entries()])}`);
    }

    // √âtape 4: Test du frontend login
    console.log('\n5. üåê Test de la page de login...');
    const loginResponse = await fetch('http://localhost:3002/login');
    console.log(`   Status: ${loginResponse.status}`);
    
    if (loginResponse.status === 200) {
      console.log('   ‚úÖ Page de login accessible');
    } else {
      console.log(`   ‚ùå Erreur sur la page de login: ${loginResponse.status}`);
    }

    console.log('\nüéâ **FLUX OTP FRONTEND TEST√â AVEC SUCC√àS !**');
    
  } catch (error) {
    console.error('\n‚ùå **ERREUR LORS DU TEST:**');
    console.error(error);
  } finally {
    await prisma.$disconnect();
  }
}

testFrontendOTPFlow(); 