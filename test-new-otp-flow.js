const { PrismaClient } = require('./src/generated/prisma');
const fetch = require('node-fetch');

// Charger les variables d'environnement
require('dotenv').config({ path: '.env.local' });

const prisma = new PrismaClient();

async function testNewOTPFlow() {
  try {
    console.log('=== TEST DU NOUVEAU FLUX OTP AVEC REDIRECTION CORRIG√âE ===\n');
    
    const email = 'bouba@ineventapp.com';
    
    // √âtape 1: Envoyer un OTP
    console.log('1. üìß Envoi du code OTP...');
    const sendResponse = await fetch('http://localhost:3000/api/auth/participant-magic-link', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ email }),
    });

    const sendResult = await sendResponse.json();
    console.log(`   Status: ${sendResponse.status}`);
    console.log(`   R√©sultat: ${sendResult.success ? '‚úÖ Envoy√©' : '‚ùå Erreur'}`);
    
    if (!sendResult.success) {
      console.log(`   Erreur: ${sendResult.error}`);
      return;
    }
    
    console.log(`   √âv√©nement: ${sendResult.eventName}\n`);

    // R√©cup√©rer le dernier code OTP
    console.log('2. üîç R√©cup√©ration du code OTP...');
    const latestOTP = await prisma.otpCode.findFirst({
      where: {
        email: email.toLowerCase(),
        used: false,
        expiresAt: {
          gt: new Date()
        }
      },
      orderBy: {
        createdAt: 'desc'
      }
    });

    if (!latestOTP) {
      console.log('‚ùå Aucun code OTP valide trouv√©');
      return;
    }

    console.log(`   ‚úÖ Code trouv√©: ${latestOTP.code}\n`);

    // √âtape 2: V√©rifier le code OTP (nouveau flux)
    console.log('3. ‚úÖ V√©rification du code OTP (nouveau flux)...');
    const verifyResponse = await fetch('http://localhost:3000/api/auth/participant-verify-otp', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        email: email,
        code: latestOTP.code
      }),
    });

    const verifyResult = await verifyResponse.json();
    console.log(`   Status: ${verifyResponse.status}`);
    console.log(`   R√©sultat: ${verifyResult.success ? '‚úÖ V√©rifi√©' : '‚ùå Erreur'}`);
    
    if (!verifyResult.success) {
      console.log(`   Erreur: ${verifyResult.error}`);
      return;
    }

    console.log(`   Utilisateur cr√©√©/mis √† jour: ${verifyResult.user.name} (${verifyResult.user.email})`);
    console.log(`   R√¥le: ${verifyResult.user.role}`);
    console.log(`   Nouvelle URL de redirection: ${verifyResult.redirectUrl}\n`);

    // √âtape 3: Tester la v√©rification de l'utilisateur participant
    console.log('4. üë§ V√©rification de l\'utilisateur participant...');
    const userVerifyResponse = await fetch('http://localhost:3000/api/auth/verify-participant-user', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        userId: verifyResult.user.id,
        email: verifyResult.user.email
      }),
    });

    const userVerifyResult = await userVerifyResponse.json();
    console.log(`   Status: ${userVerifyResponse.status}`);
    console.log(`   R√©sultat: ${userVerifyResult.success ? '‚úÖ Utilisateur v√©rifi√©' : '‚ùå Erreur'}`);
    
    if (userVerifyResult.success) {
      console.log(`   Utilisateur: ${userVerifyResult.user.name} (${userVerifyResult.user.role})`);
    }

    // √âtape 4: Tester la cr√©ation de session
    console.log('\n5. üîê Test de cr√©ation de session NextAuth...');
    const sessionResponse = await fetch('http://localhost:3000/api/auth/create-participant-session', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        userId: verifyResult.user.id,
        email: verifyResult.user.email
      }),
    });

    const sessionResult = await sessionResponse.json();
    console.log(`   Status: ${sessionResponse.status}`);
    console.log(`   R√©sultat: ${sessionResult.success ? '‚úÖ Session cr√©√©e' : '‚ùå Erreur'}`);
    
    if (sessionResult.success) {
      console.log(`   Session pour: ${sessionResult.user.name}`);
      
      // V√©rifier les cookies de session
      const cookies = sessionResponse.headers.get('set-cookie');
      if (cookies && cookies.includes('next-auth.session-token')) {
        console.log('   ‚úÖ Cookie de session NextAuth d√©fini');
      } else {
        console.log('   ‚ö†Ô∏è  Aucun cookie de session trouv√©');
      }
    }

    // √âtape 5: V√©rifier que l'utilisateur existe dans la base
    console.log('\n6. üóÑÔ∏è  V√©rification en base de donn√©es...');
    const userInDb = await prisma.user.findUnique({
      where: { email: email.toLowerCase() },
      select: {
        id: true,
        name: true,
        email: true,
        role: true,
        emailVerified: true,
        lastLogin: true,
      }
    });

    if (userInDb) {
      console.log('   ‚úÖ Utilisateur trouv√© en base:');
      console.log(`      Nom: ${userInDb.name}`);
      console.log(`      Email: ${userInDb.email}`);
      console.log(`      R√¥le: ${userInDb.role}`);
      console.log(`      Email v√©rifi√©: ${userInDb.emailVerified ? 'Oui' : 'Non'}`);
      console.log(`      Derni√®re connexion: ${userInDb.lastLogin}`);
    } else {
      console.log('   ‚ùå Utilisateur non trouv√© en base');
    }

    // √âtape 6: V√©rifier que le code est marqu√© comme utilis√©
    console.log('\n7. üîç V√©rification de l\'√©tat du code OTP...');
    const usedOtpRecord = await prisma.otpCode.findUnique({
      where: { id: latestOTP.id }
    });
    
    console.log(`   Code utilis√©: ${usedOtpRecord.used ? '‚úÖ Oui' : '‚ùå Non'}`);

    console.log('\nüéâ **NOUVEAU FLUX OTP TEST√â AVEC SUCC√àS !**');
    console.log('\nR√©sum√© du nouveau flux:');
    console.log('- Envoi OTP par email ‚úÖ');
    console.log('- V√©rification du code ‚úÖ');
    console.log('- Cr√©ation/mise √† jour utilisateur ‚úÖ');
    console.log('- G√©n√©ration URL auto-login ‚úÖ');
    console.log('- V√©rification utilisateur participant ‚úÖ');
    console.log('- Cr√©ation session NextAuth ‚úÖ');
    console.log('- Marquage code comme utilis√© ‚úÖ');
    console.log('\nüìç Pour tester la redirection compl√®te:');
    console.log(`   Ouvrez: http://localhost:3000${verifyResult.redirectUrl}`);
    
  } catch (error) {
    console.error('\n‚ùå **ERREUR LORS DU TEST:**');
    console.error(error);
  } finally {
    await prisma.$disconnect();
  }
}

testNewOTPFlow(); 