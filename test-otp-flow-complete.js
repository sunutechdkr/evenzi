const { PrismaClient } = require('./src/generated/prisma');

// Charger les variables d'environnement
require('dotenv').config({ path: '.env.local' });

const prisma = new PrismaClient();

async function testCompleteOTPFlow() {
  try {
    console.log('=== TEST COMPLET DU FLUX OTP ===\n');
    
    // √âtape 1: Envoyer un OTP
    console.log('1. Envoi du code OTP...');
    const sendResponse = await fetch('http://localhost:3000/api/auth/participant-magic-link', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        email: 'bouba@ineventapp.com'
      }),
    });

    const sendResult = await sendResponse.json();
    console.log(`   Status: ${sendResponse.status}`);
    console.log(`   R√©sultat: ${sendResult.success ? '‚úÖ Envoy√©' : '‚ùå √âchec'}`);
    
    if (!sendResult.success) {
      console.log('‚ùå √âchec de l\'envoi OTP');
      return;
    }

    // √âtape 2: R√©cup√©rer le code depuis la base de donn√©es
    console.log('\n2. R√©cup√©ration du code OTP depuis la DB...');
    const otpRecord = await prisma.otpCode.findFirst({
      where: {
        email: 'bouba@ineventapp.com',
        used: false,
        expiresAt: {
          gt: new Date()
        }
      },
      orderBy: {
        createdAt: 'desc'
      }
    });

    if (!otpRecord) {
      console.log('‚ùå Aucun code OTP trouv√©');
      return;
    }

    console.log(`   Code trouv√©: ${otpRecord.code}`);

    // √âtape 3: V√©rifier le code OTP
    console.log('\n3. V√©rification du code OTP...');
    const verifyResponse = await fetch('http://localhost:3000/api/auth/participant-verify-otp', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        email: 'bouba@ineventapp.com',
        code: otpRecord.code
      }),
    });

    const verifyResult = await verifyResponse.json();
    console.log(`   Status: ${verifyResponse.status}`);
    console.log(`   R√©sultat: ${verifyResult.success ? '‚úÖ Code valide' : '‚ùå Code invalide'}`);
    
    if (!verifyResult.success) {
      console.log('‚ùå √âchec de la v√©rification OTP');
      return;
    }

    console.log(`   Utilisateur: ${verifyResult.user.name} (${verifyResult.user.email})`);
    console.log(`   R√¥le: ${verifyResult.user.role}`);
    console.log(`   Token re√ßu: ${verifyResult.token ? '‚úÖ Pr√©sent' : '‚ùå Manquant'}`);

    // √âtape 4: V√©rifier le token et cr√©er une session
    console.log('\n4. V√©rification du token et pr√©paration de session...');
    const sessionResponse = await fetch('http://localhost:3000/api/auth/create-participant-session', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        token: verifyResult.token
      }),
    });

    const sessionResult = await sessionResponse.json();
    console.log(`   Status: ${sessionResponse.status}`);
    console.log(`   R√©sultat: ${sessionResult.success ? '‚úÖ Session pr√™te' : '‚ùå √âchec session'}`);
    
    if (sessionResult.success) {
      console.log(`   Utilisateur valid√©: ${sessionResult.user.name}`);
    }

    // √âtape 5: V√©rifier que le code est marqu√© comme utilis√©
    console.log('\n5. V√©rification de l\'√©tat du code...');
    const usedOtpRecord = await prisma.otpCode.findUnique({
      where: { id: otpRecord.id }
    });
    
    console.log(`   Code utilis√©: ${usedOtpRecord.used ? '‚úÖ Oui' : '‚ùå Non'}`);

    console.log('\nüéâ FLUX OTP COMPLET TEST√â AVEC SUCC√àS !');
    console.log('\nR√©sum√© du flux:');
    console.log('- Envoi OTP par email ‚úÖ');
    console.log('- R√©cup√©ration du code ‚úÖ');
    console.log('- V√©rification du code ‚úÖ');
    console.log('- G√©n√©ration token JWT ‚úÖ');
    console.log('- Validation token pour session ‚úÖ');
    console.log('- Marquage code comme utilis√© ‚úÖ');

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testCompleteOTPFlow(); 